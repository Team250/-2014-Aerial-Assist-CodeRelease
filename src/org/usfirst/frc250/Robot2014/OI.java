// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc250.Robot2014;
import org.usfirst.frc250.Robot2014.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton shiftUp;
    public JoystickButton startDaSound;
    public JoystickButton stopDaSound;
    public Joystick driverLeft;
    public JoystickButton shiftDown;
    public JoystickButton reverseDrive;
    public Joystick driverRight;
    public JoystickButton lowerArm;
    public JoystickButton stopArmLower;
    public JoystickButton raiseArm;
    public JoystickButton stopArmRaise;
    public JoystickButton retractShooter;
    public JoystickButton fireAll;
    public JoystickButton spinWheel;
    public JoystickButton stopWheel;
    public JoystickButton fireAllMod;
    public JoystickButton shootOneButton;
    public JoystickButton shootTwoButton;
    public Joystick malipulatorGamepad;
    public JoystickButton shiftUp2;
    public JoystickButton shiftDown2;
    public JoystickButton reverseDrive2;
    public JoystickButton startDaSound2;
    public JoystickButton stopDaSound2;
    public Joystick driverGamepad;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton LEDTest1;
    public JoystickButton LEDTest2;
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driverGamepad = new Joystick(4);
        
        stopDaSound2 = new JoystickButton(driverGamepad, 9);
        stopDaSound2.whenReleased(new stopSound());
        startDaSound2 = new JoystickButton(driverGamepad, 9);
        startDaSound2.whileHeld(new startSound());
        reverseDrive2 = new JoystickButton(driverGamepad, 4);
        reverseDrive2.whenPressed(new driveReverse());
        shiftDown2 = new JoystickButton(driverGamepad, 5);
        shiftDown2.whenPressed(new driveShiftDown());
        shiftUp2 = new JoystickButton(driverGamepad, 6);
        shiftUp2.whenPressed(new driveShiftUp());
        malipulatorGamepad = new Joystick(3);
        
        shootTwoButton = new JoystickButton(malipulatorGamepad, 3);
        shootTwoButton.whenReleased(new shootTwoCommandGroup());
        shootOneButton = new JoystickButton(malipulatorGamepad, 9);
        shootOneButton.whenReleased(new shootOneCommandGroup());
        fireAllMod = new JoystickButton(malipulatorGamepad, 6);
        fireAllMod.whenReleased(new shootAllCommanGroup());
        stopWheel = new JoystickButton(malipulatorGamepad, 5);
        stopWheel.whenReleased(new armStopWheel());
        spinWheel = new JoystickButton(malipulatorGamepad, 5);
        spinWheel.whileHeld(new armSpinWheel());
        fireAll = new JoystickButton(malipulatorGamepad, 10);
        fireAll.whenReleased(new shootAll());
        retractShooter = new JoystickButton(malipulatorGamepad, 2);
        retractShooter.whenPressed(new shooterRetract());
        stopArmRaise = new JoystickButton(malipulatorGamepad, 4);
        stopArmRaise.whenReleased(new armStop());
        raiseArm = new JoystickButton(malipulatorGamepad, 4);
        raiseArm.whileHeld(new armRaise());
        stopArmLower = new JoystickButton(malipulatorGamepad, 1);
        stopArmLower.whenReleased(new armStop());
        lowerArm = new JoystickButton(malipulatorGamepad, 1);
        lowerArm.whileHeld(new armLower());
        driverRight = new Joystick(2);
        
        reverseDrive = new JoystickButton(driverRight, 2);
        reverseDrive.whenPressed(new driveReverse());
        shiftDown = new JoystickButton(driverRight, 1);
        shiftDown.whenPressed(new driveShiftDown());
        driverLeft = new Joystick(1);
        
        stopDaSound = new JoystickButton(driverLeft, 3);
        stopDaSound.whenReleased(new stopSound());
        startDaSound = new JoystickButton(driverLeft, 3);
        startDaSound.whileHeld(new startSound());
        shiftUp = new JoystickButton(driverLeft, 1);
        shiftUp.whenPressed(new driveShiftUp());
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("armRaise", new armRaise());
        SmartDashboard.putData("armLower", new armLower());
        SmartDashboard.putData("armStop", new armStop());
        SmartDashboard.putData("armSpinWheel", new armSpinWheel());
        SmartDashboard.putData("armStopWheel", new armStopWheel());
        SmartDashboard.putData("driveCommand", new driveCommand());
        SmartDashboard.putData("driveReverse", new driveReverse());
        SmartDashboard.putData("driveGetLeftEnc", new driveGetLeftEnc());
        SmartDashboard.putData("driveGetRightEnc", new driveGetRightEnc());
        SmartDashboard.putData("driveShiftUp", new driveShiftUp());
        SmartDashboard.putData("driveShiftDown", new driveShiftDown());
        SmartDashboard.putData("shootOne", new shootOne());
        SmartDashboard.putData("shootOneCommandGroup", new shootOneCommandGroup());
        SmartDashboard.putData("shootTwo", new shootTwo());
        SmartDashboard.putData("shootTwoCommandGroup", new shootTwoCommandGroup());
        SmartDashboard.putData("shootAll", new shootAll());
        SmartDashboard.putData("shootAllCommanGroup", new shootAllCommanGroup());
        SmartDashboard.putData("shooterRetract", new shooterRetract());
        SmartDashboard.putData("LEDTest1", new LEDTest1());
        SmartDashboard.putData("LEDTest2", new LEDTest2());
        SmartDashboard.putData("UltraSonicTester", new UltraSonicTester());
        SmartDashboard.putData("UltraSonciTester2", new UltraSonciTester2());
        SmartDashboard.putData("startSound", new startSound());
        SmartDashboard.putData("stopSound", new stopSound());
        SmartDashboard.putData("armSetPosition1", new armSetPosition1());
        SmartDashboard.putData("armSetPosition2", new armSetPosition2());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        LEDTest1 = new JoystickButton(driverRight, 3);
        LEDTest1.whileHeld(new LEDTest1());
        LEDTest2= new JoystickButton(driverRight, 4);
        LEDTest2.whileHeld(new LEDTest2());
    }
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriverLeft() {
        return driverLeft;
    }
    public Joystick getDriverRight() {
        return driverRight;
    }
    public Joystick getMalipulatorGamepad() {
        return malipulatorGamepad;
    }
    public Joystick getDriverGamepad() {
        return driverGamepad;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

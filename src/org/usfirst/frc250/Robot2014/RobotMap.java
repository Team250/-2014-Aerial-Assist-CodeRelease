// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc250.Robot2014;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;
import org.usfirst.frc250.Robot2014.Robot;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController armSubpickUpWheelVictor;
    public static SpeedController armSubarmVictor;
    public static DigitalInput armSubarmUpperLimit;
    public static DigitalInput armSubarmLowerLimit;
    public static DigitalInput armSubpressureSwitch;
    public static AnalogChannel armSubpneumaticsAnalogInput;
    public static AnalogChannel armSubPotentiometer1;
    public static CANJaguar driveSubfrontLeft;
    public static CANJaguar driveSubfrontRight;
    public static CANJaguar driveSubrearLeft;
    public static CANJaguar driveSubrearRight;
    public static DoubleSolenoid driveSubdriveShiftDoubleSolenoid;
    public static DigitalOutput lEDDigitalOutput1;
    public static Compressor shooterSubshooterCompressor;
    public static Solenoid shooterSubshooterSolenoid1;
    public static Solenoid shooterSubshooterSolenoid2;
    public static Solenoid shooterSubshooterSolenoid3;
    public static Solenoid mechanicsAlertSystemsound;
    public static DigitalOutput mechanicsAlertSystemsoundSomthing;
    public static AnalogChannel mechanicsAlertSystemsoundPot;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static double kRaiseArmSpeed = 0.7;
    public static double kLowerArmSpeed = -.3;
    public static double kSpinwheel = -1.0;
    public static double kDeadbandWidth = 0.11;
    public static double kArmTolerance = 0.5;
    public static double kArmPosition1 = 0.4;
    public static double kArmPosition2 = 0.3;
//    public static boolean kLowerArmLimit = Robot.armSub.isAtLowerLimit();
//    public static boolean kUpperArmLimit = Robot.armSub.isAtUpperLimit();
    public static UltraSonic ultra1;

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        armSubpickUpWheelVictor = new Victor(1, 1);
        LiveWindow.addActuator("ArmSub", "pickUpWheelVictor", (Victor) armSubpickUpWheelVictor);

        armSubarmVictor = new Victor(1, 2);
        LiveWindow.addActuator("ArmSub", "armVictor", (Victor) armSubarmVictor);

        armSubarmUpperLimit = new DigitalInput(1, 2);
        LiveWindow.addSensor("ArmSub", "armUpperLimit", armSubarmUpperLimit);

        armSubarmLowerLimit = new DigitalInput(1, 1);
        LiveWindow.addSensor("ArmSub", "armLowerLimit", armSubarmLowerLimit);

        armSubpressureSwitch = new DigitalInput(1, 4);
        LiveWindow.addSensor("ArmSub", "pressureSwitch", armSubpressureSwitch);

        armSubpneumaticsAnalogInput = new AnalogChannel(1, 1);
        LiveWindow.addSensor("ArmSub", "pneumaticsAnalogInput", armSubpneumaticsAnalogInput);

        armSubPotentiometer1 = new AnalogChannel(1, 5);
        LiveWindow.addSensor("ArmSub", "Potentiometer 1", armSubPotentiometer1);

        try {
            driveSubfrontLeft = new CANJaguar(11);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }

        try {
            driveSubfrontRight = new CANJaguar(13);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }

        try {
            driveSubrearLeft = new CANJaguar(12);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }

        try {
            driveSubrearRight = new CANJaguar(14);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }

        driveSubdriveShiftDoubleSolenoid = new DoubleSolenoid(1, 4, 5);

        lEDDigitalOutput1 = new DigitalOutput(1, 5);

        shooterSubshooterCompressor = new Compressor(1, 3, 1, 1);

        shooterSubshooterSolenoid1 = new Solenoid(1, 1);
        LiveWindow.addActuator("ShooterSub", "shooterSolenoid1", shooterSubshooterSolenoid1);

        shooterSubshooterSolenoid2 = new Solenoid(1, 2);
        LiveWindow.addActuator("ShooterSub", "shooterSolenoid2", shooterSubshooterSolenoid2);

        shooterSubshooterSolenoid3 = new Solenoid(1, 3);
        LiveWindow.addActuator("ShooterSub", "shooterSolenoid3", shooterSubshooterSolenoid3);

        mechanicsAlertSystemsound = new Solenoid(1, 8);
        LiveWindow.addActuator("MechanicsAlertSystem", "sound", mechanicsAlertSystemsound);

        mechanicsAlertSystemsoundSomthing = new DigitalOutput(1, 8);

        mechanicsAlertSystemsoundPot = new AnalogChannel(1, 2);
        LiveWindow.addSensor("MechanicsAlertSystem", "soundPot", mechanicsAlertSystemsoundPot);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        ultra1 = new UltraSonic(224);
    }
}

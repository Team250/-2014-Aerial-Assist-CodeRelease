// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc250.Robot2014.subsystems;
import org.usfirst.frc250.Robot2014.RobotMap;
import org.usfirst.frc250.Robot2014.commands.*;
import org.usfirst.frc250.Robot2014.Utilities;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.command.Subsystem;
/**
 *
 */
public class DriveSub extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANJaguar frontLeft = RobotMap.driveSubfrontLeft;
    CANJaguar frontRight = RobotMap.driveSubfrontRight;
    CANJaguar rearLeft = RobotMap.driveSubrearLeft;
    CANJaguar rearRight = RobotMap.driveSubrearRight;
    DoubleSolenoid driveShiftDoubleSolenoid = RobotMap.driveSubdriveShiftDoubleSolenoid;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public int driveMode = 1;
    protected boolean currentGear;
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new driveCommand());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
        try {
            frontRight.changeControlMode(CANJaguar.ControlMode.kPercentVbus);
            frontRight.setPID(1, 0.05, 0);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
        try {
            frontLeft.changeControlMode(CANJaguar.ControlMode.kPercentVbus);
            frontLeft.setPID(1, 0.05, 0);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
        try {
            rearRight.changeControlMode(CANJaguar.ControlMode.kPercentVbus);
            rearRight.setPID(1, 0.05, 0);
            rearRight.configEncoderCodesPerRev(250);
            rearRight.setSpeedReference(CANJaguar.SpeedReference.kQuadEncoder);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
        try {
            rearLeft.changeControlMode(CANJaguar.ControlMode.kPercentVbus);
            rearLeft.setPID(1, 0.05, 0);
            rearLeft.configEncoderCodesPerRev(250);
            rearLeft.setSpeedReference(CANJaguar.SpeedReference.kQuadEncoder);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
    }
    
    public void drive(double left, double right) {
        try {
            //Ramping of the motor to protect the gears
            left = Utilities.MotorRamp(.1, left, frontLeft.getX());
//            System.out.println("left: " + frontLeft.getX());
//            System.out.println("Right: " + frontRight.getX());
            right = Utilities.MotorRamp(.1, right, -rearRight.getX());
            frontRight.setX(-right);
            frontLeft.setX(left);
            rearRight.setX(-right);
            rearLeft.setX(left);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
    }
    public boolean isHighGear() {
        return currentGear;
    }
    public void setGear(boolean isHighGear) {
        currentGear = isHighGear;
        //Sets the gear manualy
        if (isHighGear == true) {
            driveShiftDoubleSolenoid.set(DoubleSolenoid.Value.kForward);
            System.out.println("High Gear");
        } else {
            driveShiftDoubleSolenoid.set(DoubleSolenoid.Value.kReverse);
            System.out.println("Low Gear");
        }
    }
    public double getEncReadingFromLeft() {
//        try {
//            System.out.println("LeftEncoder");
//            return rearLeft.getSpeed();
//        } catch (CANTimeoutException ex) {
//            ex.printStackTrace();
//            return 0.0;
//        }
        return 0.0;
    }
    public double getEncReadingFromRight() {
//        try {
//            System.out.println("RightEncoder");
//            return -rearRight.getSpeed();
//        } catch (CANTimeoutException ex) {
//            ex.printStackTrace();
//            return 0.0;
//        }
        return 0.0;
    }
}
